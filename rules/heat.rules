import org.eclipse.smarthome.core.library.types.DecimalType
import org.openhab.core.model.script.ScriptServiceUtil


rule heat_control_off_store
when
    Item heat_control received update OFF
then
    target_temp.members.forEach [ item |
    val String item_name = item.name
        val backup_item  = ScriptServiceUtil.getItemRegistry.getItem(item_name + "_backup") as GenericItem
        var Number value = item.state as DecimalType
        backup_item.postUpdate(value)
        item.sendCommand(-10)
    ]
end


rule heat_control_on_restore
when
    Item heat_control received update ON
then
    target_temp.members.forEach [ item |
        val String item_name = item.name
        val backup_item  = ScriptServiceUtil.getItemRegistry.getItem(item_name + "_backup") as GenericItem
        var Number backup_value = backup_item.state as DecimalType
        item.sendCommand(backup_value)
    ]
end


rule og_sz_heat
when
    Item DF_OG_SZ received update
then
    if (heat_control.state == ON){
        if (DF_OG_SZ.state == 0){
            TS_OG_SZ_backup.postUpdate(TS_OG_SZ.state as DecimalType)
            TS_OG_SZ.sendCommand(-10)
        }else{
            TS_OG_SZ.sendCommand(TS_OG_SZ_backup.state as DecimalType)
        }
    }
end


rule og_kn_heat
when
    Item DF_OG_KN received update
then
    if (heat_control.state == ON){
        logInfo("og_kn_heat", "A")
        if (DF_OG_KN.state == 0){
            TS_OG_KN_backup.postUpdate(TS_OG_KN.state as DecimalType)
            TS_OG_KN.sendCommand(-10)
        }else{
            TS_OG_KN.sendCommand(TS_OG_KN_backup.state as DecimalType)  
        }
    }
end


rule og_ks_heat
when
    Item DF_OG_KS received update
then
    if (heat_control.state == ON){
        if (DF_OG_KS.state == 0){
            TS_OG_KS_backup.postUpdate(TS_OG_KS.state as DecimalType)
            TS_OG_KS.sendCommand(-10)
        }else{
            TS_OG_KS.sendCommand(TS_OG_KS_backup.state as DecimalType)
        }
    }
end
