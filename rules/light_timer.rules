import java.util.Map

val Map<String, Timer> lightTimers = newHashMap
val Map<String, Timer> lightTimersAlways = newHashMap


//timers that are always on

rule light_timer_always
when
     Member of AlwaysTimer changed from OFF to ON
then
    if (lightTimersAlways.containsKey(triggeringItem.name)){
        lightTimersAlways.get(triggeringItem.name)?.cancel()
    }
    lightTimersAlways.put( triggeringItem.name, createTimer(now.plusSeconds(600), [|
        triggeringItem.sendCommand(OFF)
        lightTimersAlways.put(triggeringItem.name, null)
    ]))
end


//timers that are only active at night (and can be switched off with item nigt_timers)

rule light_timer
when
     Member of Lights changed from OFF to ON
then
    if ((night_timer.state==ON) && (now.getHour()>=23 || now.getHour() <= 4)){ 
        if (lightTimers.containsKey(triggeringItem.name)){
            lightTimers.get(triggeringItem.name)?.cancel()
            //logInfo("RuleLightTimers", "Canceled old timer for " + triggeringItem.name)
        }
        lightTimers.put( triggeringItem.name, createTimer(now.plusSeconds(600), [|
            triggeringItem.sendCommand(OFF)
            lightTimers.put(triggeringItem.name, null) // remove the timer from the Hashmap
            //logInfo("RuleLightTimers", "Destroyed timer for " + triggeringItem.name)
        ]))
        //logInfo("RuleLightTimers", "Created timer for " + triggeringItem.name)
    }else{
        //logInfo("RuleLightTimers", "to early or late")
    }
end


//set timer for all lights that are on at 2300

rule light_timer_on
when
   Time cron "0 0 23 * * ?"
then
    if (night_timer.state==ON){ 
        Lights.members.forEach [ item |
            if (lightTimers.containsKey(item.name)){
                lightTimers.get(item.name)?.cancel()
            }
            if (item.state==ON){
                lightTimers.put( item.name, createTimer(now.plusSeconds(600), [|
                    item.sendCommand(OFF)
                    lightTimers.put(item.name, null)
                ]))
            }
        ]  
    }        
end


//kill all timers if night_timer(s) changed to OFF

rule night_timer_off
when
   Item night_timer changed from ON to OFF
then
    Lights.members.forEach [ item |
        if (lightTimers.containsKey(item.name)){
            lightTimers.get(item.name)?.cancel()
        }
    ]  
end


//set timer for all lights when night_timer is turned on

rule RuleLightTimerOn
when
   Item night_timer changed from OFF to ON
then
    if (now.getHour()>=23 || now.getHour() <= 4){  
        //logInfo("RuleLightTimersOn", "Setting all Timers...")
        Lights.members.forEach [ item |
            if (lightTimers.containsKey(item.name)){
                lightTimers.get(item.name)?.cancel()
            }
            if (item.state==ON){
                lightTimers.put( item.name, createTimer(now.plusSeconds(600), [|
                    item.sendCommand(OFF)
                    lightTimers.put(item.name, null)
                ]))
            }
        ]  
    }        
end


rule sunset_light_on
when
	Channel 'astro:sun:local:set#event' triggered START
then
	SunsetLights.members.forEach [ item |
		item.sendCommand(ON)
	]
end


rule sunset_light_off
when
	Time cron "0 0 22 * * ?"
then
	SunsetLights.members.forEach [ item |
		item.sendCommand(OFF)
	]
end


rule chicken_light_set
when
   	Channel 'astro:sun:ChickenOuterLights:set#event' triggered START
then
    //logInfo("RuleChickenOuterLights", "Setting all Timers...")
	ChickenOuterLights.members.forEach [ item |
        item.sendCommand(ON)
		if (lightTimers.containsKey(item.name)){
		    lightTimers.get(item.name)?.cancel()
		}
		lightTimers.put( item.name, createTimer(now.plusMinutes(240), [|
		    item.sendCommand(OFF)
		    lightTimers.put(item.name, null)
		]))
	]    	
end


rule chicken_light_rise
when
   Channel 'astro:sun:ChickenOuterLights:rise#event' triggered START
then
    //logInfo("RuleChickenOuterLights", "Setting all Timers...")
	ChickenOuterLights.members.forEach [ item |
        item.sendCommand(ON)
		if (lightTimers.containsKey(item.name)){
		    lightTimers.get(item.name)?.cancel()
		}
		lightTimers.put( item.name, createTimer(now.plusMinutes(180), [|
		    item.sendCommand(OFF)
		    lightTimers.put(item.name, null)
		]))
	]    	
end
